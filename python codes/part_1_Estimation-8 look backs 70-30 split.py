# -*- coding: utf-8 -*-
"""
Created on Sat Nov  9 12:17:29 2019

@author: PawanSain
"""

''' Pridicting Power generation because on Wind '''

from math import sqrt
from numpy import concatenate
from matplotlib import pyplot
import pandas as pd
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error
import numpy as np
import seaborn as sns
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
import glob
from datetime import datetime
'''matplotlib inline '''


''' Loading data '''
dataframe = pd.read_excel('testing.xlsx',index_col="DateTime")
dataframe.head()


''' Cleaning Data '''
dataframe['Power generated by system | (kW)'].replace(0, np.nan, inplace=True)
dataframe['Power generated by system | (kW)'].fillna(method='ffill', inplace=True)

''' Dividing data in test and train sets '''
dataset = dataframe.values
train_size = int(len(dataset) * 0.70)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]
print(len(train), len(test))

''' Helper to create time frames with look backs '''
def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    print(len(dataY))
    return np.array(dataX), np.array(dataY)

''' Creating time frames with look backs '''
look_back = 8
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)


''' Re-shaping data for model requirement '''
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))

''' Fitting the data in LSTM Deep Learning model '''
model = Sequential()
model.add(LSTM(100, input_shape=(trainX.shape[1], trainX.shape[2])))
model.add(Dense(1))
model.compile(loss='mae', optimizer='adam')
history = model.fit(trainX, trainY, epochs=1, batch_size=100, validation_data=(testX, testY), verbose=0, shuffle=False)

''' Predicting 1 years data based on 5 years of previous data '''
yhat = model.predict(testX)

''' Plotting the first 500 entries to see prediction '''
pyplot.figure(figsize=(20,8))
pyplot.plot(yhat[:500], label='predict')
pyplot.plot(testY[:500], label='true')
pyplot.legend()
pyplot.show()



print("Mean squared error: %.3f" % mean_squared_error(testY, yhat))


print("Root mean squared error: %.3f" % sqrt(mean_squared_error(testY, yhat)))

from sklearn.metrics import mean_squared_error, r2_score
print('Variance : %.3f' % r2_score(testY, yhat))

from sklearn.metrics import mean_absolute_error
print("Mean absolute error: %.3f" % mean_absolute_error(testY, yhat))
